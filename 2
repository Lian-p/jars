import cv2
import numpy as np

cap = cv2.VideoCapture(0)

while True:
    ret, frame = cap.read()
    if not ret:
        break
    
    output = frame.copy()
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    blur = cv2.GaussianBlur(gray, (5,5), 0)
    edges = cv2.Canny(blur, 50, 150)
    
    contours, _ = cv2.findContours(edges, cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)
    cards = []
    
    for contour in contours:
        area = cv2.contourArea(contour)
        if 20000 < area < 120000:
            peri = cv2.arcLength(contour, True)
            approx = cv2.approxPolyDP(contour, 0.02 * peri, True)
            
            if len(approx) == 4:
                cv2.drawContours(output, [approx], -1, (0,255,0), 3)
                pts1 = np.float32(approx.reshape(4,2))
                pts2 = np.float32([[0,0],[200,0],[200,300],[0,300]])
                matrix = cv2.getPerspectiveTransform(pts1, pts2)
                card = cv2.warpPerspective(frame, matrix, (200,300))
                cards.append(card)

    for i, card in enumerate(cards):
        cv2.imshow(f'Karte {i}', card)
    
    cv2.imshow('Original', output)
    cv2.imshow('Kanten', edges)
    
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()





corner = card[5:45, 5:35]
                corner_gray = cv2.cvtColor(corner, cv2.COLOR_BGR2GRAY)
                _, corner_thresh = cv2.threshold(corner_gray, 127, 255, cv2.THRESH_BINARY + cv2.THRESH_OTSU)
                corner_thresh = cv2.resize(corner_thresh, (0,0), fx=4, fy=4)
                
                kernel = np.ones((2,2), np.uint8)
                corner_thresh = cv2.dilate(corner_thresh, kernel, iterations=1)
                corner_thresh = cv2.erode(corner_thresh, kernel, iterations=1)






import cv2
import numpy as np

# Angenommen, 'card' ist das zugeschnittene Bild
# Rotationswinkel: 188 Grad
angle = 188

# Bildgröße (Breite und Höhe)
(h, w) = card.shape[:2]

# Rotationszentrum (z. B. Bildmitte)
center = (w // 2, h // 2)

# Rotationsmatrix berechnen
rotation_matrix = cv2.getRotationMatrix2D(center, angle, 1.0)  # Skalierung = 1.0

# Bild drehen
rotated_card = cv2.warpAffine(card, rotation_matrix, (w, h))

# Ergebnis anzeigen
cv2.imshow("Rotated Card", rotated_card)
cv2.waitKey(0)
cv2.destroyAllWindows()
